<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Aikumi AI - Your Digital Companion</title>
<style>
  /* CSS Reset */
  *, *::before, *::after {
    box-sizing: border-box;
  }
  body {
    margin: 0; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: var(--bg);
    color: var(--fg);
    line-height: 1.5;
    min-height: 100vh;
    display: flex; flex-direction: column;
  }
  :root {
    --bg-light: #f7f9fc;
    --fg-light: #222;
    --card-bg-light: #fff;
    --shadow-light: rgba(0,0,0,0.1);
    --bg-dark: #121212;
    --fg-dark: #eee;
    --card-bg-dark: #1f1f1f;
    --shadow-dark: rgba(0,0,0,0.7);
    --primary: #4f46e5;
    --primary-hover: #4338ca;
    --error: #dc2626;
    --success: #16a34a;
    --warning: #facc15;
  }
  [data-theme='light'] {
    --bg: var(--bg-light);
    --fg: var(--fg-light);
    --card-bg: var(--card-bg-light);
    --shadow: var(--shadow-light);
  }
  [data-theme='dark'] {
    --bg: var(--bg-dark);
    --fg: var(--fg-dark);
    --card-bg: var(--card-bg-dark);
    --shadow: var(--shadow-dark);
  }

  header {
    padding: 1rem 2rem;
    background: var(--card-bg);
    box-shadow: 0 2px 6px var(--shadow);
    display: flex; justify-content: space-between; align-items: center;
  }
  header h1 {
    margin: 0; font-weight: 700; font-size: 1.5rem; color: var(--primary);
  }
  .theme-toggle {
    cursor: pointer;
    font-size: 1.5rem;
    user-select: none;
    background: none;
    border: none;
    color: var(--primary);
    transition: color 0.3s ease;
  }
  .theme-toggle:hover, .theme-toggle:focus {
    color: var(--primary-hover);
    outline: none;
  }
  main {
    flex: 1;
    display: grid;
    grid-template-columns: repeat(auto-fit,minmax(320px,1fr));
    gap: 1.5rem;
    padding: 1.5rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }
  section {
    background: var(--card-bg);
    box-shadow: 0 4px 10px var(--shadow);
    border-radius: 10px;
    padding: 1.25rem 1.5rem;
    display: flex;
    flex-direction: column;
  }
  section h2 {
    margin-top: 0; margin-bottom: 1rem;
    font-weight: 600;
    font-size: 1.25rem;
    color: var(--primary);
  }
  button {
    background-color: var(--primary);
    color: white;
    border: none;
    border-radius: 6px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    font-weight: 600;
    transition: background-color 0.3s ease;
    user-select: none;
  }
  button:hover, button:focus {
    background-color: var(--primary-hover);
    outline: none;
  }
  button:disabled {
    opacity: 0.5;
    cursor: default;
  }
  input, textarea {
    font-family: inherit;
    font-size: 1rem;
    padding: 0.5rem 0.75rem;
    margin-bottom: 1rem;
    border: 1px solid #ccc;
    border-radius: 6px;
    resize: vertical;
    background: var(--bg);
    color: var(--fg);
    transition: border-color 0.3s ease;
  }
  input:focus, textarea:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 6px var(--primary);
  }
  .typing {
    font-weight: 700;
    font-size: 1.25rem;
    height: 1.5rem;
    color: var(--primary);
    margin-bottom: 1rem;
    min-height: 1.5rem;
    user-select: none;
  }
  .chat-log {
    flex: 1;
    background: var(--bg);
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 0.5rem 1rem;
    overflow-y: auto;
    margin-bottom: 1rem;
    min-height: 200px;
    color: var(--fg);
  }
  .chat-log div.user {
    text-align: right;
    margin: 0.25rem 0;
    color: var(--primary);
  }
  .chat-log div.ai {
    text-align: left;
    margin: 0.25rem 0;
    color: var(--fg);
  }
  .chat-input-area {
    display: flex;
    gap: 0.5rem;
  }
  .chat-input-area textarea {
    flex: 1;
    min-height: 50px;
    resize: none;
  }
  .voice-btn {
    font-size: 1.5rem;
    background: none;
    border: none;
    color: var(--primary);
    cursor: pointer;
    user-select: none;
  }
  .voice-btn.listening {
    color: var(--success);
    animation: pulse 1s infinite alternate;
  }
  @keyframes pulse {
    from { filter: brightness(1); }
    to { filter: brightness(1.4); }
  }

  /* Modal */
  .modal {
    display: none;
    position: fixed;
    z-index: 50;
    top: 0; left: 0; right: 0; bottom: 0;
    background: rgba(0,0,0,0.5);
    align-items: center; justify-content: center;
  }
  .modal.show {
    display: flex;
  }
  .modal-content {
    background: var(--card-bg);
    padding: 1.5rem;
    border-radius: 8px;
    max-width: 90vw;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 8px 24px var(--shadow);
  }
  .modal-content button {
    margin-top: 1rem;
  }

  /* FAQ */
  .faq-item {
    border-bottom: 1px solid #ccc;
    padding: 0.5rem 0;
  }
  .faq-question {
    cursor: pointer;
    font-weight: 600;
    position: relative;
  }
  .faq-question::after {
    content: '+';
    position: absolute;
    right: 0;
    font-weight: 700;
    transition: transform 0.3s ease;
  }
  .faq-question[aria-expanded="true"]::after {
    content: '-';
  }
  .faq-answer {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.35s ease;
  }
  .faq-question.open + .faq-answer {
    max-height: 150px;
  }

  /* Contact Form */
  form#contactForm {
    display: flex;
    flex-direction: column;
  }

  /* Notes & Markdown */
  #notesArea, #mdEditor {
    font-family: monospace;
    width: 100%;
    min-height: 120px;
    margin-bottom: 1rem;
    border-radius: 6px;
  }
  #mdPreview {
    background: var(--bg);
    border: 1px solid #ccc;
    padding: 0.75rem;
    border-radius: 6px;
    min-height: 120px;
    overflow-y: auto;
  }
  .section-row {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }
  .section-row > * {
    flex: 1 1 300px;
  }
  .avatar-container {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .avatar-container img {
    width: 128px;
    height: 128px;
    border-radius: 50%;
    border: 3px solid var(--primary);
    margin-bottom: 0.5rem;
    background: #fff;
  }

  /* Auth */
  #authSection, #loggedInSection {
    display: flex;
    flex-direction: column;
  }
  #authStatus {
    margin-top: 0.5rem;
    font-weight: 600;
    min-height: 1.2rem;
  }
  #authStatus.error {
    color: var(--error);
  }
  #authStatus.success {
    color: var(--success);
  }
  #logoutBtn {
    align-self: flex-start;
  }

  /* Progress bar */
  #progressBar {
    height: 5px;
    background: var(--primary);
    width: 0;
    transition: width 0.3s ease;
    border-radius: 3px;
    margin-bottom: 1rem;
  }

  /* Tooltip */
  [data-tooltip] {
    position: relative;
    cursor: pointer;
  }
  [data-tooltip]::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 125%; left: 50%;
    transform: translateX(-50%);
    background: var(--primary);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    white-space: nowrap;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
    z-index: 10;
  }
  [data-tooltip]:hover::after, [data-tooltip]:focus::after {
    opacity: 1;
  }

  /* Task list */
  #taskInput {
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 6px;
    margin-bottom: 0.5rem;
    width: 100%;
  }
  #taskList {
    list-style: none;
    padding-left: 0;
    max-height: 150px;
    overflow-y: auto;
    margin-bottom: 1rem;
  }
  #taskList li {
    background: var(--bg);
    padding: 0.5rem;
    margin-bottom: 0.25rem;
    border-radius: 6px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  #taskList li.completed {
    text-decoration: line-through;
    color: #777;
  }
  #taskList li button.delete-btn {
    background: var(--error);
    border: none;
    color: white;
    border-radius: 4px;
    padding: 0 0.5rem;
    cursor: pointer;
  }
  #taskList li button.delete-btn:hover {
    background: #b91c1c;
  }

  /* Responsive tweaks */
  @media (max-width: 600px) {
    main {
      padding: 1rem;
      grid-template-columns: 1fr;
    }
  }

</style>
</head>
<body>

<header>
  <h1>Aikumi AI</h1>
  <button class="theme-toggle" aria-label="Toggle theme" data-tooltip="Toggle light/dark theme">ðŸŒ“</button>
</header>

<main>

  <section aria-label="AI Features">
    <h2>Welcome to Aikumi AI</h2>
    <div class="typing" aria-live="polite" aria-atomic="true" aria-relevant="additions"></div>
    <p>Your digital companion for chat, creation, notes, and more!</p>
  </section>

  <section aria-label="Chatbot Interface" id="chatbotSection">
    <h2>Chat with Aikumi AI</h2>
    <div class="chat-log" id="chatLog" role="log" aria-live="polite" aria-relevant="additions"></div>
    <div class="chat-input-area">
      <textarea id="chatInput" aria-label="Chat input" placeholder="Ask me anything... (Ctrl+Enter to send)" rows="2"></textarea>
      <button id="sendBtn" aria-label="Send chat message" data-tooltip="Send chat message">Send</button>
      <button class="voice-btn" id="voiceBtn" aria-label="Start voice input" data-tooltip="Toggle voice input">ðŸŽ¤</button>
    </div>
    <div id="progressBar" aria-hidden="true"></div>
  </section>

  <section aria-label="AI Avatar Generator" class="avatar-container">
    <h2>AI Avatar Generator</h2>
    <img id="avatarImage" src="" alt="AI generated avatar" />
    <button id="generateAvatarBtn" data-tooltip="Generate new avatar">Generate New Avatar</button>
  </section>

  <section aria-label="Markdown Editor">
    <h2>Markdown Editor</h2>
    <div class="section-row">
      <textarea id="mdEditor" aria-label="Markdown editor" spellcheck="false"></textarea>
      <div id="mdPreview" aria-live="polite" aria-atomic="true" aria-label="Markdown preview"></div>
    </div>
  </section>

  <section aria-label="Notes" id="notesSection">
    <h2>Notes</h2>
    <textarea id="notesArea" aria-label="Notes area" placeholder="Write your notes here..."></textarea>
    <div style="display:flex;gap:1rem;flex-wrap:wrap;">
      <input type="file" id="fileInput" aria-label="Upload notes file" />
      <button id="downloadBtn" data-tooltip="Download notes as text file">Download Notes</button>
    </div>
  </section>

  <section aria-label="Contact Form">
    <h2>Contact Us</h2>
    <form id="contactForm" aria-describedby="contactDesc">
      <input type="text" id="contactName" placeholder="Your name" aria-label="Your name" required autocomplete="name" />
      <input type="email" id="contactEmail" placeholder="Your email" aria-label="Your email" required autocomplete="email" />
      <textarea id="contactMessage" placeholder="Your message" aria-label="Your message" rows="4" required></textarea>
      <button type="submit" data-tooltip="Send your message">Send Message</button>
    </form>
  </section>

  <section aria-label="Task List">
    <h2>Task List</h2>
    <input type="text" id="taskInput" placeholder="Add new task..." aria-label="Add new task" />
    <ul id="taskList" aria-live="polite" aria-relevant="additions removals"></ul>
  </section>

  <section aria-label="Inspirational Quotes">
    <h2>Inspirational Quote</h2>
    <blockquote id="quoteText" aria-live="polite" aria-atomic="true" style="font-style: italic; margin-bottom: 0.5rem;">Loading...</blockquote>
    <button id="refreshQuoteBtn" data-tooltip="Get new quote">New Quote</button>
  </section>

  <section aria-label="Joke Generator">
    <h2>AI Joke Generator</h2>
    <p id="jokeText" aria-live="polite" aria-atomic="true" style="min-height: 3rem;">Press the button for a joke!</p>
    <button id="getJokeBtn" data-tooltip="Get a new joke">Tell me a joke</button>
  </section>

  <section aria-label="Authentication" id="authSection">
    <h2>User Authentication</h2>
    <form id="authForm">
      <label for="authUsername">Username:</label>
      <input type="text" id="authUsername" required autocomplete="username" />
      <label for="authPassword">Password:</label>
      <input type="password" id="authPassword" required autocomplete="current-password" />
      <button type="submit" id="authSubmitBtn">Login</button>
    </form>
    <button id="authModeToggle" data-tooltip="Switch between login and sign up">Switch to Sign Up</button>
    <p id="authStatus" role="alert" aria-live="assertive"></p>
  </section>

  <section aria-label="Logged In User Info" id="loggedInSection" style="display:none;">
    <h2>Welcome, <span id="welcomeUser"></span>!</h2>
    <button id="logoutBtn" data-tooltip="Log out from your account">Logout</button>
  </section>

  <section aria-label="Frequently Asked Questions">
    <h2>FAQ</h2>
    <div class="faq-item">
      <button class="faq-question" aria-expanded="false" aria-controls="faq1answer" id="faq1">What is Aikumi AI?</button>
      <div class="faq-answer" id="faq1answer" role="region" aria-labelledby="faq1">Aikumi AI is your all-in-one AI companion for chat, creativity, notes, and productivity.</div>
    </div>
    <div class="faq-item">
      <button class="faq-question" aria-expanded="false" aria-controls="faq2answer" id="faq2">Is my data saved?</button>
      <div class="faq-answer" id="faq2answer" role="region" aria-labelledby="faq2">Notes, tasks, and user accounts are saved locally in your browser for privacy.</div>
    </div>
    <div class="faq-item">
      <button class="faq-question" aria-expanded="false" aria-controls="faq3answer" id="faq3">How can I contact support?</button>
      <div class="faq-answer" id="faq3answer" role="region" aria-labelledby="faq3">Use the Contact Us form above to send us a message.</div>
    </div>
  </section>

</main>

<script>
(() => {
  const root = document.documentElement;

  // === THEME MANAGEMENT ===
  const themeToggleBtn = document.querySelector('.theme-toggle');

  // Apply saved or system theme
  const savedTheme = localStorage.getItem('aikumi-theme');
  const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  if(savedTheme) {
    root.setAttribute('data-theme', savedTheme);
  } else {
    root.setAttribute('data-theme', systemPrefersDark ? 'dark' : 'light');
  }

  function toggleTheme() {
    const current = root.getAttribute('data-theme');
    const next = current === 'light' ? 'dark' : 'light';
    root.setAttribute('data-theme', next);
    localStorage.setItem('aikumi-theme', next);
  }
  themeToggleBtn.addEventListener('click', toggleTheme);

  // Keyboard shortcut Ctrl+T toggles theme
  window.addEventListener('keydown', (e) => {
    if(e.ctrlKey && e.key.toLowerCase() === 't') {
      e.preventDefault();
      toggleTheme();
    }
  });

  // === CHATBOT ===
  const chatLog = document.getElementById('chatLog');
  const chatInput = document.getElementById('chatInput');
  const sendBtn = document.getElementById('sendBtn');
  const progressBar = document.getElementById('progressBar');
  const typingIndicator = document.querySelector('.typing');

  function appendMessage(text, sender='ai') {
    const div = document.createElement('div');
    div.textContent = text;
    div.className = sender;
    chatLog.appendChild(div);
    chatLog.scrollTop = chatLog.scrollHeight;
  }

  function setLoading(state) {
    progressBar.style.width = state ? '100%' : '0%';
  }

  function fakeAiResponse(input) {
    // Mock AI delay and response
    setLoading(true);
    typingIndicator.textContent = 'Aikumi is thinking...';
    return new Promise(resolve => {
      setTimeout(() => {
        const response = `You said: "${input}". Unfortunately, Iâ€™m just a demo AI!`;
        setLoading(false);
        typingIndicator.textContent = '';
        resolve(response);
      }, 1500);
    });
  }

  async function sendChat() {
    const msg = chatInput.value.trim();
    if(!msg) return;
    appendMessage(msg, 'user');
    chatInput.value = '';
    const reply = await fakeAiResponse(msg);
    appendMessage(reply, 'ai');
  }

  sendBtn.addEventListener('click', sendChat);
  chatInput.addEventListener('keydown', (e) => {
    if(e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
      e.preventDefault();
      sendChat();
    }
  });

  // === VOICE INPUT ===
  const voiceBtn = document.getElementById('voiceBtn');
  let recognition;
  if('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognition = new SpeechRecognition();
    recognition.lang = 'en-US';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    recognition.onstart = () => {
      voiceBtn.classList.add('listening');
      voiceBtn.setAttribute('aria-label', 'Listening... Click to stop.');
    };
    recognition.onend = () => {
      voiceBtn.classList.remove('listening');
      voiceBtn.setAttribute('aria-label', 'Start voice input');
    };
    recognition.onerror = (event) => {
      console.error('Speech recognition error', event.error);
      voiceBtn.classList.remove('listening');
      voiceBtn.setAttribute('aria-label', 'Start voice input');
    };
    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      chatInput.value = transcript;
      sendChat();
    };
  } else {
    voiceBtn.style.display = 'none';
  }

  voiceBtn.addEventListener('click', () => {
    if(voiceBtn.classList.contains('listening')) {
      recognition.stop();
    } else {
      recognition.start();
    }
  });

  // === AVATAR GENERATOR ===
  const avatarImg = document.getElementById('avatarImage');
  const avatarBtn = document.getElementById('generateAvatarBtn');

  function generateAvatar() {
    // Using https://robohash.org/ with random seed
    const seed = Math.random().toString(36).substring(2,10);
    avatarImg.src = `https://robohash.org/${seed}?set=set5&size=128x128`; // set5 = cats but we'll say capybara style
    avatarImg.alt = `AI generated avatar for ${seed}`;
  }
  avatarBtn.addEventListener('click', generateAvatar);
  generateAvatar();

  // === MARKDOWN EDITOR ===
  const mdEditor = document.getElementById('mdEditor');
  const mdPreview = document.getElementById('mdPreview');

  // Minimal markdown parser for #, **, *, links
  function parseMarkdown(md) {
    let html = md
      .replace(/</g, '&lt;').replace(/>/g, '&gt;') // escape tags
      .replace(/^### (.*$)/gim, '<h3>$1</h3>')
      .replace(/^## (.*$)/gim, '<h2>$1</h2>')
      .replace(/^# (.*$)/gim, '<h1>$1</h1>')
      .replace(/\*\*(.*?)\*\*/gim, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/gim, '<em>$1</em>')
      .replace(/\[([^\]]+)\]\(([^)]+)\)/gim, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>')
      .replace(/\n/g, '<br />');
    return html;
  }
  mdEditor.addEventListener('input', () => {
    mdPreview.innerHTML = parseMarkdown(mdEditor.value);
  });
  mdEditor.value = "# Welcome to Aikumi AI Markdown Editor\nStart typing markdown here...";
  mdEditor.dispatchEvent(new Event('input'));

  // === NOTES ===
  const notesArea = document.getElementById('notesArea');
  const fileInput = document.getElementById('fileInput');
  const downloadBtn = document.getElementById('downloadBtn');
  const NOTES_STORAGE_KEY = 'aikumi-notes';

  // Load notes from localStorage
  notesArea.value = localStorage.getItem(NOTES_STORAGE_KEY) || '';
  notesArea.addEventListener('input', () => {
    localStorage.setItem(NOTES_STORAGE_KEY, notesArea.value);
  });

  fileInput.addEventListener('change', () => {
    const file = fileInput.files[0];
    if(!file) return;
    const reader = new FileReader();
    reader.onload = (e) => {
      notesArea.value = e.target.result;
      localStorage.setItem(NOTES_STORAGE_KEY, notesArea.value);
    };
    reader.readAsText(file);
    fileInput.value = null;
  });

  downloadBtn.addEventListener('click', () => {
    const blob = new Blob([notesArea.value], {type: 'text/plain'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'aikumi-notes.txt';
    a.click();
    URL.revokeObjectURL(url);
  });

  // === CONTACT FORM ===
  const contactForm = document.getElementById('contactForm');
  contactForm.addEventListener('submit', e => {
    e.preventDefault();
    const name = contactForm.contactName.value.trim();
    const email = contactForm.contactEmail.value.trim();
    const message = contactForm.contactMessage.value.trim();
    if(!name || !email || !message) {
      alert('Please fill all contact fields.');
      return;
    }
    alert(`Thank you for your message, ${name}! (This is a demo, no message sent.)`);
    contactForm.reset();
  });

  // === TASK LIST ===
  const taskInput = document.getElementById('taskInput');
  const taskList = document.getElementById('taskList');
  const TASK_STORAGE_KEY = 'aikumi-tasks';

  function loadTasks() {
    const tasks = JSON.parse(localStorage.getItem(TASK_STORAGE_KEY) || '[]');
    tasks.forEach(t => addTaskToDOM(t.text, t.completed));
  }
  function saveTasks() {
    const tasks = [];
    taskList.querySelectorAll('li').forEach(li => {
      tasks.push({
        text: li.textContent,
        completed: li.classList.contains('completed'),
      });
    });
    localStorage.setItem(TASK_STORAGE_KEY, JSON.stringify(tasks));
  }
  function addTaskToDOM(text, completed = false) {
    const li = document.createElement('li');
    li.textContent = text;
    if(completed) li.classList.add('completed');
    li.addEventListener('click', () => {
      li.classList.toggle('completed');
      saveTasks();
    });
    const delBtn = document.createElement('button');
    delBtn.textContent = 'âœ•';
    delBtn.setAttribute('aria-label', `Delete task: ${text}`);
    delBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      li.remove();
      saveTasks();
    });
    li.appendChild(delBtn);
    taskList.appendChild(li);
    saveTasks();
  }
  taskInput.addEventListener('keydown', (e) => {
    if(e.key === 'Enter' && taskInput.value.trim()) {
      addTaskToDOM(taskInput.value.trim());
      taskInput.value = '';
    }
  });
  loadTasks();

  // === QUOTE GENERATOR ===
  const quoteText = document.getElementById('quoteText');
  const refreshQuoteBtn = document.getElementById('refreshQuoteBtn');

  async function fetchQuote() {
    quoteText.textContent = 'Loading...';
    try {
      const response = await fetch('https://api.quotable.io/random');
      const data = await response.json();
      quoteText.textContent = `"${data.content}" â€” ${data.author}`;
    } catch {
      quoteText.textContent = 'Failed to load quote.';
    }
  }
  refreshQuoteBtn.addEventListener('click', fetchQuote);
  fetchQuote();

  // === JOKE GENERATOR ===
  const jokeText = document.getElementById('jokeText');
  const getJokeBtn = document.getElementById('getJokeBtn');

  async function fetchJoke() {
    jokeText.textContent = 'Loading...';
    try {
      const response = await fetch('https://icanhazdadjoke.com/', {
        headers: { Accept: 'application/json' }
      });
      const data = await response.json();
      jokeText.textContent = data.joke;
    } catch {
      jokeText.textContent = 'Failed to load joke.';
    }
  }
  getJokeBtn.addEventListener('click', fetchJoke);

  // === AUTHENTICATION (mock) ===
  const authSection = document.getElementById('authSection');
  const loggedInSection = document.getElementById('loggedInSection');
  const authForm = document.getElementById('authForm');
  const authUsername = document.getElementById('authUsername');
  const authPassword = document.getElementById('authPassword');
  const authSubmitBtn = document.getElementById('authSubmitBtn');
  const authModeToggle = document.getElementById('authModeToggle');
  const authStatus = document.getElementById('authStatus');
  const welcomeUser = document.getElementById('welcomeUser');
  const logoutBtn = document.getElementById('logoutBtn');

  let authMode = 'login'; // or 'signup'
  let users = JSON.parse(localStorage.getItem('aikumi-users') || '{}');

  function saveUsers() {
    localStorage.setItem('aikumi-users', JSON.stringify(users));
  }

  authForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const username = authUsername.value.trim();
    const password = authPassword.value.trim();
    if(authMode === 'signup') {
      if(users[username]) {
        authStatus.textContent = 'Username already taken.';
        return;
      }
      users[username] = { password };
      saveUsers();
      authStatus.textContent = 'Sign up successful! You can now log in.';
      authMode = 'login';
      authSubmitBtn.textContent = 'Login';
      authModeToggle.textContent = 'Switch to Sign Up';
    } else {
      if(!users[username] || users[username].password !== password) {
        authStatus.textContent = 'Invalid username or password.';
        return;
      }
      authStatus.textContent = '';
      authSection.style.display = 'none';
      loggedInSection.style.display = 'block';
      welcomeUser.textContent = username;
    }
    authUsername.value = '';
    authPassword.value = '';
  });

  authModeToggle.addEventListener('click', () => {
    if(authMode === 'login') {
      authMode = 'signup';
      authSubmitBtn.textContent = 'Sign Up';
      authModeToggle.textContent = 'Switch to Login';
      authStatus.textContent = '';
    } else {
      authMode = 'login';
      authSubmitBtn.textContent = 'Login';
      authModeToggle.textContent = 'Switch to Sign Up';
      authStatus.textContent = '';
    }
  });

  logoutBtn.addEventListener('click', () => {
    authSection.style.display = 'block';
    loggedInSection.style.display = 'none';
    welcomeUser.textContent = '';
  });

  // === FAQ Expand/Collapse ===
  document.querySelectorAll('.faq-question').forEach(btn => {
    btn.addEventListener('click', () => {
      const expanded = btn.getAttribute('aria-expanded') === 'true';
      btn.setAttribute('aria-expanded', String(!expanded));
      const answer = document.getElementById(btn.getAttribute('aria-controls'));
      if(answer) {
        answer.style.display = expanded ? 'none' : 'block';
      }
    });
  });

})();
</script>

</body>
</html>
